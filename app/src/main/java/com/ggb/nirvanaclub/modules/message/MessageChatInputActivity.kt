package com.ggb.nirvanaclub.modules.message

import android.Manifest
import android.annotation.SuppressLint
import android.net.Uri
import android.text.Editable
import android.text.TextUtils
import android.util.Log
import android.view.Gravity
import android.view.KeyEvent
import android.view.MotionEvent
import android.view.View
import android.widget.ImageView
import android.widget.PopupWindow
import android.widget.TextView
import com.ggb.nirvanaclub.R
import com.ggb.nirvanaclub.base.BaseActivity
import com.ggb.nirvanaclub.modules.keyboard.AppGridLayout
import com.ggb.nirvanaclub.modules.keyboard.ChatKeyBoard
import com.ggb.nirvanaclub.modules.keyboard.EmojiConstants
import com.ggb.nirvanaclub.modules.keyboard.SimpleCommonUtils
import com.ggb.nirvanaclub.modules.keyboard.data.EmoticonEntity
import com.ggb.nirvanaclub.modules.keyboard.interfaces.EmoticonClickListener
import com.ggb.nirvanaclub.modules.keyboard.utils.EmoticonsKeyboardUtils
import com.ggb.nirvanaclub.modules.keyboard.widget.FuncLayout
import com.ggb.nirvanaclub.modules.message.audio2.AudioRecordManager
import com.ggb.nirvanaclub.modules.message.audio2.IAudioRecordListener
import com.ggb.nirvanaclub.utils.GlideEngine
import com.luck.picture.lib.PictureSelector
import com.luck.picture.lib.config.PictureConfig
import com.luck.picture.lib.config.PictureMimeType
import com.sj.emoji.EmojiBean
import com.tamsiree.rxkit.view.RxToast
import com.yanzhenjie.permission.AndPermission
import org.jetbrains.anko.toast
import java.io.File
import java.io.FileInputStream
import java.io.FileOutputStream


abstract class MessageChatInputActivity : BaseActivity() , FuncLayout.OnFuncKeyBoardListener{

    private var ekBar: ChatKeyBoard? = null

    private var audioRecordManager: AudioRecordManager? = null

    private var hasPermissions = false

    protected fun initInputView() {
        ekBar = findViewById(R.id.ek_bar)
        initEmoticonsKeyBoardBar()
        initAudioRecordManager()
        //ËØ≠Èü≥ËÆæÁΩÆ
        checkTalkPermission()
    }

    @SuppressLint("ClickableViewAccessibility")
    private fun initEmoticonsKeyBoardBar() {
        SimpleCommonUtils.initEmoticonsEditText(ekBar!!.etChat)
        ekBar!!.setAdapter(SimpleCommonUtils.getCommonAdapter(this, emoticonClickListener))
        ekBar!!.addOnFuncKeyBoardListener(this)
        val appGridLayout = AppGridLayout(this)
        appGridLayout.initView(this, View.OnClickListener { view ->
            if (view.tag as Int == 1) {
                //ÁÇπÂáª‰∫Ü+üëåËøõÂÖ•Áõ∏ÂÜåÈÄâÂõæ
                PictureSelector.create(this)
                    .openGallery(PictureMimeType.ofImage()) // ÂÖ®ÈÉ®.PictureMimeType.ofAll()„ÄÅÂõæÁâá.ofImage()„ÄÅËßÜÈ¢ë.ofVideo()„ÄÅÈü≥È¢ë.ofAudio()
                    .isWeChatStyle(true) //ÂºÄÂêØR.style.picture_WeChat_styleÊ†∑Âºè
                    .imageEngine(GlideEngine.createGlideEngine())
                    .maxSelectNum(1) // ÊúÄÂ§ßÂõæÁâáÈÄâÊã©Êï∞Èáè
                    .minSelectNum(1) // ÊúÄÂ∞èÈÄâÊã©Êï∞Èáè
                    .imageSpanCount(3) // ÊØèË°åÊòæÁ§∫‰∏™Êï∞
                    .selectionMode(PictureConfig.SINGLE) // Â§öÈÄâ or ÂçïÈÄâ PictureConfig.MULTIPLE : PictureConfig.SINGLE
                    .isPreviewImage(true) // ÊòØÂê¶ÂèØ9È¢ÑËßàÂõæÁâá
                    .isPreviewVideo(false) // ÊòØÂê¶ÂèØÈ¢ÑËßàËßÜÈ¢ë
                    .isCamera(true) // ÊòØÂê¶ÊòæÁ§∫ÊãçÁÖßÊåâÈíÆ
                    .isZoomAnim(true) // ÂõæÁâáÂàóË°®ÁÇπÂáª Áº©ÊîæÊïàÊûú ÈªòËÆ§true
                    .isEnableCrop(false) // ÊòØÂê¶Ë£ÅÂâ™
                    .isCompress(true) // ÊòØÂê¶ÂéãÁº©
                    .hideBottomControls(false) // ÊòØÂê¶ÊòæÁ§∫uCropÂ∑•ÂÖ∑Ê†èÔºåÈªòËÆ§‰∏çÊòæÁ§∫
                    .isGif(true) // ÊòØÂê¶ÊòæÁ§∫gifÂõæÁâá
                    .freeStyleCropEnabled(true) // Ë£ÅÂâ™Ê°ÜÊòØÂê¶ÂèØÊãñÊãΩ
                    .circleDimmedLayer(false) // ÊòØÂê¶ÂúÜÂΩ¢Ë£ÅÂâ™
                    .showCropGrid(true) // ÊòØÂê¶ÊòæÁ§∫Ë£ÅÂâ™Áü©ÂΩ¢ÁΩëÊ†º ÂúÜÂΩ¢Ë£ÅÂâ™Êó∂Âª∫ËÆÆËÆæ‰∏∫false
                    .isOpenClickSound(true) // ÊòØÂê¶ÂºÄÂêØÁÇπÂáªÂ£∞Èü≥
                    .forResult(PictureConfig.CHOOSE_REQUEST) //ÁªìÊûúÂõûË∞ÉonActivityResult code
            } else if (view.tag as Int == 2 || view.tag as Int == 3 || view.tag as Int == 4) {
                //ÂèëÈÄÅÈü≥ËßÜÈ¢ëÔºåÊó†ÂäüËÉΩ‰∏çÂÅöÂ§ÑÁêÜ
                RxToast.info("ÁâõËõôÂëêÊöÇÊó†ÂºÄÊîæÊ≠§ÂäüËÉΩÔºåÊï¨ËØ∑ÊúüÂæÖÔºÅ")
//                sendCallMessage(if (view.tag as Int == 2) ChatBean.SUBTYPE_CALL_AUDIO else ChatBean.SUBTYPE_CALL_VIDEO)
            }
        })
        ekBar!!.addFuncView(appGridLayout)
        ekBar!!.etChat.setOnSizeChangedListener { w, h, oldw, oldh -> scrollToBottom() }
        ekBar!!.btnSend.setOnClickListener {
            if (!ekBar!!.etChat.text.toString().trim().equals("")) {
                onSendBtnClick(ekBar!!.etChat.text.toString())
                ekBar!!.etChat.setText("")
            }
        }
        ekBar!!.btnVoice.setOnTouchListener { v, event ->
            when (event.action) {
                MotionEvent.ACTION_DOWN -> {
                    val perms =
                        arrayOf(Manifest.permission.RECORD_AUDIO)
                    if (hasPermissions) {
                        audioRecordManager!!.startRecord()
                    } else {
                        RxToast.info(resources.getString(R.string.talk_permission))
                    }
                }
                MotionEvent.ACTION_MOVE -> if (isCancelled(v, event)) {
                    audioRecordManager!!.willCancelRecord()
                } else {
                    audioRecordManager!!.continueRecord()
                }
                MotionEvent.ACTION_UP -> {
                    audioRecordManager!!.stopRecord()
                    audioRecordManager!!.destroyRecord()
                }
            }
            false
        }
    }

    /**
     * Â§çÂà∂Âçï‰∏™Êñá‰ª∂
     *
     * @param oldPathName String ÂéüÊñá‰ª∂Ë∑ØÂæÑ+Êñá‰ª∂Âêç Â¶ÇÔºödata/user/0/com.test/files/abc.txt
     * @param newPathName String Â§çÂà∂ÂêéË∑ØÂæÑ+Êñá‰ª∂Âêç Â¶ÇÔºödata/user/0/com.test/cache/abc.txt
     * @return `true` if and only if the file was copied;
     * `false` otherwise
     */
    fun copyFile(oldPathName: String, newPathName: File): Boolean {
        return try {
            val oldFile = File(oldPathName)
            if (!oldFile.exists()) {
                return false
            } else if (!oldFile.isFile) {
                return false
            } else if (!oldFile.canRead()) {
                return false
            }
            val fileInputStream = FileInputStream(oldPathName)
            val fileOutputStream = FileOutputStream(newPathName)
            val buffer = ByteArray(1024)
            var byteRead: Int
            while (-1 != fileInputStream.read(buffer).also { byteRead = it }) {
                fileOutputStream.write(buffer, 0, byteRead)
            }
            fileInputStream.close()
            fileOutputStream.flush()
            fileOutputStream.close()
            true
        } catch (e: Exception) {
            e.printStackTrace()
            false
        }
    }

    override fun dispatchKeyEvent(event: KeyEvent?): Boolean {
        if (EmoticonsKeyboardUtils.isFullScreen(this)) {
            val isConsum = ekBar!!.dispatchKeyEventInFullScreen(event)
            return if (isConsum) isConsum else super.dispatchKeyEvent(event)
        }
        return super.dispatchKeyEvent(event)
    }

    override fun onPause() {
        super.onPause()
        ekBar!!.reset()
    }

    protected fun initAudioRecordManager() {
        audioRecordManager = AudioRecordManager(this)
        audioRecordManager!!.maxVoiceDuration = AudioRecordManager.DEFAULT_MAX_AUDIO_RECORD_TIME_SECOND
        audioRecordManager!!.setAudioSavePath(null)
        audioRecordManager!!.audioRecordListener = object : IAudioRecordListener {
            private var mTimerTV: TextView? = null
            private var mStateTV: TextView? = null
            private var mStateIV: ImageView? = null
            private var mRecordWindow: PopupWindow? = null
            override fun initTipView() {
                Log.e("TAG","initTipView")
                val view = View.inflate(this@MessageChatInputActivity, R.layout.popup_audio_wi_vo, null)
                mStateIV = view.findViewById<View>(R.id.rc_audio_state_image) as ImageView
                mStateTV = view.findViewById<View>(R.id.rc_audio_state_text) as TextView
                mTimerTV = view.findViewById<View>(R.id.rc_audio_timer) as TextView
                mRecordWindow = PopupWindow(view, -1, -1)
                mRecordWindow!!.showAtLocation(findViewById(R.id.root_rl), 17, 0, 0)
                mRecordWindow!!.isFocusable = true
                mRecordWindow!!.isOutsideTouchable = false
                mRecordWindow!!.isTouchable = false
            }

            override fun setTimeoutTipView(counter: Int) {
                if (mRecordWindow != null) {
                    mStateIV!!.visibility = View.GONE
                    mStateTV!!.visibility = View.VISIBLE
                    mStateTV!!.text = "ÊâãÊåá‰∏äÊªëÔºåÂèñÊ∂àÂèëÈÄÅ"
                    mStateTV!!.setBackgroundResource(R.drawable.bg_voice_popup)
                    mTimerTV!!.text = String.format("%s", *arrayOf<Any>(Integer.valueOf(counter)))
                    mTimerTV!!.visibility = View.VISIBLE
                }
            }

            override fun setRecordingTipView() {
                if (mRecordWindow != null) {
                    mStateIV!!.visibility = View.VISIBLE
                    mStateIV!!.setImageResource(R.drawable.ic_volume_1)
                    mStateTV!!.visibility = View.VISIBLE
                    mStateTV!!.text = "ÊâãÊåá‰∏äÊªëÔºåÂèñÊ∂àÂèëÈÄÅ"
                    mStateTV!!.setBackgroundResource(R.drawable.bg_voice_popup)
                    mTimerTV!!.visibility = View.GONE
                }
            }

            override fun setAudioShortTipView() {
                if (mRecordWindow != null) {
                    mStateIV!!.setImageResource(R.drawable.ic_volume_wraning)
                    mStateTV!!.text = "ÂΩïÈü≥Êó∂Èó¥Â§™Áü≠"
                }
            }

            override fun setCancelTipView() {
                if (mRecordWindow != null) {
                    mTimerTV!!.visibility = View.GONE
                    mStateIV!!.visibility = View.VISIBLE
                    mStateIV!!.setImageResource(R.drawable.ic_volume_cancel)
                    mStateTV!!.visibility = View.VISIBLE
                    mStateTV!!.text = "ÊùæÂºÄÊâãÊåáÔºåÂèñÊ∂àÂèëÈÄÅ"
                    mStateTV!!.setBackgroundResource(R.drawable.bg_main_full_2)
                }
            }

            override fun destroyTipView() {
                if (mRecordWindow != null) {
                    mRecordWindow!!.dismiss()
                    mRecordWindow = null
                    mStateIV = null
                    mStateTV = null
                    mTimerTV = null
                }
            }

            override fun onStartRecord() {}
            override fun onFinish(audioPath: Uri, duration: Int) {
                //ÂèëÈÄÅÊñá‰ª∂
                val file = File(audioPath.path)
                if (file.exists()) {
                    val extendmap = HashMap<String, String>()
                    extendmap["duration"] = duration.toString()
                    extendmap["hadplay"] = "1"

                    //TODO ÂèëÈÄÅËØ≠Ë®ÄÊ∂àÊÅØ
                    sendAudioMessage(file, duration)
//                    sendAudioMessage(file.name, JsonUtil.getJson(extendmap), audioPath.path)
                }
            }

            override fun onAudioDBChanged(db: Int) {
                when (db / 5) {
                    0 -> mStateIV!!.setImageResource(R.drawable.ic_volume_1)
                    1 -> mStateIV!!.setImageResource(R.drawable.ic_volume_2)
                    2 -> mStateIV!!.setImageResource(R.drawable.ic_volume_3)
                    3 -> mStateIV!!.setImageResource(R.drawable.ic_volume_4)
                    4 -> mStateIV!!.setImageResource(R.drawable.ic_volume_5)
                    5 -> mStateIV!!.setImageResource(R.drawable.ic_volume_6)
                    6 -> mStateIV!!.setImageResource(R.drawable.ic_volume_7)
                    else -> mStateIV!!.setImageResource(R.drawable.ic_volume_8)
                }
            }
        }
    }

    protected abstract fun scrollToBottom()

    protected abstract fun onSendImage(image: String?)

//    protected abstract fun sendAudioMessage(filename: String?, extend: String?, sandboxFilePath: String?)
    protected abstract fun sendAudioMessage(filename: File, duration: Int)

    protected abstract fun sendCallMessage(callType: Int)

    protected abstract fun onSendBtnClick(content: String)

    private fun isCancelled(view: View, event: MotionEvent): Boolean {
        val location = IntArray(2)
        view.getLocationOnScreen(location)
        return event.rawX < location[0] || event.rawX > location[0] + view.width || event.rawY < location[1] - 40
    }

    private var emoticonClickListener: EmoticonClickListener<Any> = object : EmoticonClickListener<Any> {
        override fun onEmoticonClick(o: Any?, actionType: Int, isDelBtn: Boolean) {
            if (isDelBtn) {
                SimpleCommonUtils.delClick(ekBar!!.etChat)
            } else {
                if (o == null) {
                    return
                }
                if (actionType == EmojiConstants.EMOTICON_CLICK_BIGIMAGE) {
                    if (o is EmoticonEntity) {
//                        onSendImage(o.iconUri)
                    }
                } else {
                    var content: String? = null
                    if (o is EmojiBean) {
                        content = o.emoji
                    } else if (o is EmoticonEntity) {
                        content = o.content
                    }
                    if (TextUtils.isEmpty(content)) {
                        return
                    }
                    val index: Int = ekBar!!.getEtChat().getSelectionStart()
                    val editable: Editable? = ekBar!!.getEtChat().getText()
                    editable?.insert(index, content)
                }
            }
        }
    }

    /**
     * ÊâìÂºÄÈ∫¶ÂÖãÈ£éÊùÉÈôêÔºå‰∏çÁÑ∂ËÅäÂ§©Ê≤°Ê≥ï‰ΩøÁî®
     */
    @SuppressLint("MissingPermission")
    private fun checkTalkPermission(){
        AndPermission.with(this)
            .runtime()
            .permission(Manifest.permission.RECORD_AUDIO)
            .onGranted { permissions ->
                hasPermissions = true
            }
            .onDenied { permissions ->
                toast(R.string.talk_permission).setGravity(Gravity.CENTER, 0, 0)
            }
            .start()
    }

    override fun OnFuncPop(height: Int) {
        scrollToBottom()
    }

    override fun OnFuncClose() {
        
    }

}